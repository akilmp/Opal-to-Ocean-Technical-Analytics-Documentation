"""Command line interface for orchestrating Opal to Ocean pipelines."""
from __future__ import annotations

import argparse
from datetime import UTC, datetime
from pathlib import Path
from typing import Callable, Dict

from .ingest.pipeline import run_ingest
from .logging import configure_logging, get_logger, log_event
from .paths import ARTIFACTS_DIR, ensure_directories
from .quality.report import run_quality_checks
from .transform.pipeline import run_transforms


def _timestamp_run_id(prefix: str) -> str:
    return f"{prefix}_{datetime.now(UTC).strftime('%Y%m%dT%H%M%S')}"


def _create_run_directory(run_id: str) -> Path:
    run_dir = ARTIFACTS_DIR / run_id
    run_dir.mkdir(parents=True, exist_ok=True)
    return run_dir


def _ingest_command(args: argparse.Namespace) -> None:
    run_id = args.run_id or _timestamp_run_id("ingest")
    run_dir = _create_run_directory(run_id)
    logger = get_logger("ingest").bind(run_id=run_id)
    log_event(logger, "starting_ingest", run_dir=str(run_dir))
    manifest_path, quality_path = run_ingest(run_id=run_id, run_dir=run_dir)
    log_event(
        logger,
        "finished_ingest",
        manifest=str(manifest_path),
        quality_report=str(quality_path),
    )


def _marts_command(args: argparse.Namespace) -> None:
    run_id = args.run_id or _timestamp_run_id("marts")
    run_dir = _create_run_directory(run_id)
    logger = get_logger("marts").bind(run_id=run_id)
    log_event(logger, "starting_transforms", run_dir=str(run_dir))
    manifest_path, quality_path = run_transforms(run_id=run_id, run_dir=run_dir)
    log_event(
        logger,
        "finished_transforms",
        manifest=str(manifest_path),
        quality_report=str(quality_path),
    )


def _analyze_command(args: argparse.Namespace) -> None:
    run_id = args.run_id or _timestamp_run_id("analyze")
    run_dir = _create_run_directory(run_id)
    logger = get_logger("analyze").bind(run_id=run_id)
    log_event(logger, "starting_analysis", run_dir=str(run_dir))
    manifest_path, quality_path = run_quality_checks(run_id=run_id, run_dir=run_dir)
    log_event(
        logger,
        "finished_analysis",
        manifest=str(manifest_path),
        quality_report=str(quality_path),
    )


def _app_command(args: argparse.Namespace) -> None:
    run_id = args.run_id or _timestamp_run_id("app")
    run_dir = _create_run_directory(run_id)
    logger = get_logger("app").bind(run_id=run_id)
    log_event(logger, "app_run_invoked", run_dir=str(run_dir))
    # The dashboard relies on marts generated by earlier steps. We record a manifest
    # so CI users can trace how the command was invoked without launching Streamlit.
    manifest_data = {
        "run_id": run_id,
        "pipeline": "app",
        "generated_at": datetime.now(UTC).isoformat(),
        "notes": "Streamlit app requires manual launch via `streamlit run app/main.py`.",
    }
    manifest_path = run_dir / "run_manifest.json"
    manifest_path.write_text(_as_json(manifest_data))
    quality_path = run_dir / "quality_report.json"
    quality_path.write_text(_as_json({"run_id": run_id, "pipeline": "app", "checks": []}))
    log_event(
        logger,
        "app_manifest_recorded",
        manifest=str(manifest_path),
        quality_report=str(quality_path),
    )


def _as_json(payload: Dict[str, object]) -> str:
    import json

    return json.dumps(payload, indent=2, sort_keys=True)


def build_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(description="Opal to Ocean pipeline runner")
    parser.add_argument(
        "command",
        choices=["ingest", "marts", "analyze", "app"],
        help="Command to execute",
    )
    parser.add_argument(
        "--run-id",
        dest="run_id",
        help="Optional run identifier for reproducibility",
    )
    return parser


def main(argv: list[str] | None = None) -> None:
    ensure_directories()
    configure_logging()
    parser = build_parser()
    args = parser.parse_args(argv)

    command_map: Dict[str, Callable[[argparse.Namespace], None]] = {
        "ingest": _ingest_command,
        "marts": _marts_command,
        "analyze": _analyze_command,
        "app": _app_command,
    }
    handler = command_map[args.command]
    handler(args)


if __name__ == "__main__":
    main()
